// This contract forces HODLing until a certain price target has been reached
// A minimum block is provided to ensure that oracle price entries from before this block are disregarded
// i.e. when the BCH price was $1000 in the past, an oracle entry with the old block number and price can not be used.
// Instead, a message with a block number and price from after the minBlock needs to be passed.
// This contract serves as a simple example for checkDataSig-based contracts.
contract HodlVault(
    pubkey oraclePk,
    int priceTarget
) {
    function spend(datasig oracleSig, int oraclePrice) {
        // Check that current price is at least priceTarget
        require(oraclePrice >= priceTarget);

        // Handle necessary signature checks
        require(checkSigFromStack(
            oracleSig,
            bytes(oraclePrice),
            oraclePk,
        ));
    }
}
